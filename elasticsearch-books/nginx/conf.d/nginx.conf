upstream elasticsearch {
    server elasticsearch:9200;
}

upstream kibana {
    server kibana:5601;
}

upstream client {
    server client:3000;
}


server {
    listen 80;

    # reverse proxy to the ElasticSearch REST server
    # Simple way to proxy-pass to internal server
    # Note the location directive should end with '/' and the proxy_pass value also shold end with valid URI
    # which if present will overwrite the location
    # https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/
    # Quote:  If the URI is specified along with the address, it replaces the part of the request URI that matches the location parameter.
    # location /some/path/ {
    #    proxy_pass http://www.example.com/link/;
    # }
    # For example, here the request with the /some/path/page.html URI will be proxied to http://www.example.com/link/page.html.
    # If the address is specified without a URI, or it is not possible to determine the part of URI to be replaced, the full request URI is passed (possibly, modified).
    location /elasticsearch/ {
        proxy_pass http://elasticsearch/;
        proxy_redirect off;
        proxy_set_header        Host $host;
    }

    # reverse proxy to the Kibana server
    # This is another way to "rewrite" the proxied location if needed
    # NOTE!!! in order internal paths (links, JS, CSS, etc...) to work correctly its
    # environment variable SERVER_BASEPATH has to be set to "/kibana" also
    # (and SERVER_REWRITEBASEPATH to 'true' for version<7.0),
    # in this setup it is done in docker-compose.yml when the Kibana is created
    # https://discuss.elastic.co/t/kibana-5-4-behind-nginx/98114/5
    # https://discuss.elastic.co/t/kibana-and-nginx-in-subpath/90280/6
    location /kibana {
        # both have the same result
        # proxy_pass http://kibana/kibana;
        proxy_pass http://kibana;
        proxy_redirect off;
        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    }

    location /client {
        proxy_pass http://client;
        proxy_redirect off;
        proxy_buffering off;
        proxy_set_header        Host $host;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
