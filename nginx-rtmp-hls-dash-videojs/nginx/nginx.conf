# user nginx;
worker_processes auto;
pid /run/nginx.pid;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	# 1GB
	client_max_body_size 1024m;

    types {
        # for HLS
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;

        # for DASH
        application/dash+xml mpd;
    }

    upstream app {
        # a NodeJS server is running in another cDocker container named "app"
        # and both containers are conected by docker-compose in a local network and "talk"
        # so the NodeJS app contaner has a named host "app"
        server app:3000;
    }

    server {
        listen 80;

        location /app {
            proxy_pass http://app;
        }

        # path to HLS and DASH application service
        location /media {
            # Wide-open CORS config
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                #
                # Custom headers and headers various browsers *should* be OK with but aren't
                #
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                #
                # Tell client that this pre-flight info is valid for 20 days
                #
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            if ($request_method = 'POST') {
               add_header 'Access-Control-Allow-Origin' '*';
               add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
               add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
               add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            }
            if ($request_method = 'GET') {
               add_header 'Access-Control-Allow-Origin' '*';
               add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
               add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
               add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

            #    add_header Cache-Control no-cache;
            }

            # this will contain both /tmp/nginx/hls and /tmp/nginx/dash
            alias /tmp/nginx;
        }
    }

}

# RTMP media server
rtmp {
    server {
        listen 1935;
        listen [::]:1935 ipv6only=on;

        application media-server {
            live on;
            interleave on;

            hls on;
            hls_path /tmp/nginx/hls;
            hls_fragment 15s;
            # hls_nested on;
            # hls_variant _low  BANDWIDTH=640000;
            # hls_variant _hi  BANDWIDTH=2140000;
            # # ffmpeg static execution
            # exec_static ffmpeg -protocol_whitelist tcp,udp,http,rtp,file -i SOURCE -c:v libx264 -g 50 -preset fast -b:v 4096k -c:a aac -ar 44100 -f flv rtmp://127.0.0.1/media_server/stream_hi -c:v libx264 -g 50 -preset fast -b:v 1024k -c:a aac -ar 44100 -f flv rtmp://127.0.0.1/media_server/stream_low;

            dash on;
            dash_path /tmp/nginx/dash;
            dash_fragment 15s;


            # on_publish http://yourdomain.com/rtmp_publish_auth;
            # this will make Nginx on every publish to with GET params
            # rtmp://yourdomain.com/media-server/streamName?psk=supersecret
            # to make a POST request to the auth URL like http://yourdomain.com/rtmp_publish_auth with
            # POST params insided name=streamName&psk=supersecret
            # and if the HTTP Status code is 2xx then publishing is allowed, else is not allowed.
            # Note how the stream name "streamName" is passed as "name" parameter
            # Same os for auttorizing playing
            # on_play http://yourdomain.com/rtmp_play_auth;

            # Example with same Nginx server
            # on_publish http://localhost[:port]/auth;
            # # and
            # server {
            #     listen <port>;
            #     location /auth {
            #         if ($arg_psk = 'totallysecretpassword') {
            #             return 201;
            #         }
            #     return 404;
            # }

            # protection to allow publishing only from specific IPs
            # same is true for playing
            allow publish your-ip;
            deny publish all;
        }
   }
}
